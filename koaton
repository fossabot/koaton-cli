#!/usr/bin/env node

/*eslint no-process-exit: 0*/

global.requireD = function(lib) {
	let a = require(lib);
	return a.default ? a.default : a;
}

const utils = require('./lib/utils').default;

process.env.isproyect = utils.canAccess('public') &&
	utils.canAccess('app.js') &&
	utils.canAccess('bower.json') &&
	utils.canAccess('package.json') &&
	utils.canAccess('routes') &&
	utils.canAccess('config');

process.env.NODE_ENV = process.argv.indexOf("-p") > -1 || process.argv.indexOf("--production") > -1 ? "production" : "development";
var port = process.argv.indexOf("--port");
port = parseInt(process.argv[port + 1], 10) || 62626;
process.env.port = port;

require('./lib/globals');
const program = require('commander');
const commands = require('./lib/commands').default;
const pcmds = require("./lib/commands/help").include();
const co = require("co");
const help = process.argv.slice(2)[0];
require('colors');

if (!help || help === "-h" || help === "--help") {
	console.log(require('./lib/commands/help').render());
	process.exit(0);
}

for (const definition of Object.assign(commands, pcmds)) {
	try {
		var args = definition.args.length > 0 ? `[${definition.args.join("] [")}]` : "";
		var command = program.command(`${definition.cmd} ${args}`)
			.description(definition.description)
			.action(co.wrap(function*() {

				try {
					if (!(definition.cmd === "new" || definition.cmd === "semver") && process.env.isproyect === 'false') {
						if (process.argv[3] !== '-h' && process.argv[3] !== '--help') {
							throw definition.cmd;
						}
					}
				} catch (e) {
					console.log();
					console.log("You must be inside a koaton proyect to run this command.")
					console.log();
					process.exit(1);
				}

				var exitCode = 1;
				try {
					// console.log(definition.action);
					console.log(`koaton-cli version ${require('./package.json').version}\n`);
					exitCode = yield definition.action.apply(command, arguments);
				} catch (err) {
					console.log(err.stack);
					process.exit(1);
				}
				process.exit((exitCode === 0 || exitCode === undefined) ? 0 : 1);
			}));
		if (definition.alias) {
			command.alias(definition.alias);
		}
		definition.options.forEach(function(option) {
			command.option(`${option[0]}, ${option[1]}`, option[2]);
		});
	} catch (e) {
		console.log(e.stack);
	}
	//});
}
program.parse(process.argv);
process.on("beforeExit", () => {
	console.log();
	console.log("That command does not exists.".cyan);
	console.log();
	process.exit(1);
});
process.title = "Koaton";
